// Generated by Dagger (https://dagger.dev).
package com.example.dagger2learning.dagger;

import com.example.dagger2learning.MainActivity;
import com.example.dagger2learning.MainActivity_MembersInjector;
import com.example.dagger2learning.car.Car;
import com.example.dagger2learning.car.Car_Factory;
import com.example.dagger2learning.car.Car_MembersInjector;
import com.example.dagger2learning.car.PetrolEngine;
import com.example.dagger2learning.car.Remote;
import com.example.dagger2learning.car.Wheels;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCarComponent implements CarComponent {
  private final Integer horsePower;

  private final Integer engineCapacity;

  private DaggerCarComponent(Integer horsePowerParam, Integer engineCapacityParam) {
    this.horsePower = horsePowerParam;
    this.engineCapacity = engineCapacityParam;
  }

  public static CarComponent.Builder builder() {
    return new Builder();
  }

  private PetrolEngine petrolEngine() {
    return new PetrolEngine(horsePower, engineCapacity);
  }

  private Wheels wheels() {
    return WheelsModule_ProvideWheelsFactory.provideWheels(WheelsModule_ProvideRimsFactory.provideRims(), WheelsModule_ProvideTiresFactory.provideTires());
  }

  @Override
  public Car getCar() {
    return injectCar(Car_Factory.newInstance(petrolEngine(), wheels()));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private Car injectCar(Car instance) {
    Car_MembersInjector.injectEnableRemote(instance, new Remote());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectCar(instance, getCar());
    return instance;
  }

  private static final class Builder implements CarComponent.Builder {
    private Integer horsePower;

    private Integer engineCapacity;

    @Override
    public Builder horsePower(int horsePower) {
      this.horsePower = Preconditions.checkNotNull(horsePower);
      return this;
    }

    @Override
    public Builder engineCapacity(int engineCapacity) {
      this.engineCapacity = Preconditions.checkNotNull(engineCapacity);
      return this;
    }

    @Override
    public CarComponent build() {
      Preconditions.checkBuilderRequirement(horsePower, Integer.class);
      Preconditions.checkBuilderRequirement(engineCapacity, Integer.class);
      return new DaggerCarComponent(horsePower, engineCapacity);
    }
  }
}
