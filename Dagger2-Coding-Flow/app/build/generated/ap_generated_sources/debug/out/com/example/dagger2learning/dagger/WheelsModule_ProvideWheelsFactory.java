// Generated by Dagger (https://dagger.dev).
package com.example.dagger2learning.dagger;

import com.example.dagger2learning.car.Rims;
import com.example.dagger2learning.car.Tires;
import com.example.dagger2learning.car.Wheels;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WheelsModule_ProvideWheelsFactory implements Factory<Wheels> {
  private final Provider<Rims> rimsProvider;

  private final Provider<Tires> tiresProvider;

  public WheelsModule_ProvideWheelsFactory(Provider<Rims> rimsProvider,
      Provider<Tires> tiresProvider) {
    this.rimsProvider = rimsProvider;
    this.tiresProvider = tiresProvider;
  }

  @Override
  public Wheels get() {
    return provideWheels(rimsProvider.get(), tiresProvider.get());
  }

  public static WheelsModule_ProvideWheelsFactory create(Provider<Rims> rimsProvider,
      Provider<Tires> tiresProvider) {
    return new WheelsModule_ProvideWheelsFactory(rimsProvider, tiresProvider);
  }

  public static Wheels provideWheels(Rims rims, Tires tires) {
    return Preconditions.checkNotNullFromProvides(WheelsModule.provideWheels(rims, tires));
  }
}
